"use strict";

const form = document.querySelector(".form");
const containerWorkouts = document.querySelector(".workouts");
const inputType = document.querySelector(".form__input--type");
const inputDistance = document.querySelector(".form__input--distance");
const inputDuration = document.querySelector(".form__input--duration");
const inputCadence = document.querySelector(".form__input--cadence");
const inputElevation = document.querySelector(".form__input--elevation");
const resetBtn = document.querySelector(".reset-btn");

let map;
let mapEvent;

//–ö–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç new id
class Workout {
    date = new Date();
    id = Date.now() + "".slice(-10);
    constructor(coords, distance, duration) {
        // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –¥–∏—Å—Ç–∞–Ω—Ü–∏—è,
        this.coords = coords;
        this.distance = distance;
        this.duration = duration;
    }
    _setDescription() {
        //prettier-ignore
        const months = [ "January","February","March","April","May","June",
            "July","August","September","October","November","December",
        ];
        this.description = `${this.type[0].toUpperCase()}
        ${this.type.slice(1)} ${
            months[this.date.getMonth()]
        } ${this.date.getDate()}`;
    }
}

//–≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ë–µ–≥
class Running extends Workout {
    type = "running";
    constructor(coords, distance, duration, cadence) {
        super(coords, distance, duration);
        this.cadence = cadence;
        this.calcPace();
        this._setDescription();
    }
    calcPace() {
        this.pace = this.duration / this.distance;
        return this.pace;
    }
}

//–≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –í–µ–ª–æ—Å–∏–ø–µ–¥
class Cyrcling extends Workout {
    type = "cycling";
    constructor(coords, distance, duration, elevation) {
        super(coords, distance, duration);
        this.elevation = elevation;
        this.calcSpeed();
        this._setDescription();
    }
    calcSpeed() {
        this.speed = this.distance / (this.duration / 60);
        return this.speed;
    }
}

const run1 = new Running([-4, 20], 5.2, 24, 170);
const cyrcling = new Cyrcling([-4, 20], 26, 90, 520);

//–ö–ª–∞—Å—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã
class App {
    _workouts = [];
    _map;
    _mapEvent;
    constructor() {
        //–ó–∞–ø—É—Å–∫ –ª–æ–≥–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this._getPosition();

        //–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Local Storage(LS)
        this._getLocalStorage();

        //–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ _newWorkout
        form.addEventListener("submit", this._newWorkout.bind(this));

        //–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ _toogleField
        inputType.addEventListener("change", this._toogleField());

        //–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ _moveToPopap
        containerWorkouts.addEventListener(
            "click",
            this._moveToPopap.bind(this)
        );

        //–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –æ–±–Ω—É–ª—è–µ—Ç –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ –∫–∞—Ä—Ç–µ
        resetBtn.addEventListener("click", this.reset);
    }

    //–ú–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –æ  –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    _getPosition() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                this._loadMap.bind(this),
                function () {
                    alert("–í—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–π –ª–æ–∫–∞—Ü–∏–∏!");
                }
            );
        }
    }

    //–ú–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –≤ —Å–ª—É—á–∞–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å–≤–æ–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    _loadMap(position) {
        const { latitude } = position.coords;
        const { longitude } = position.coords;
        const coords = [latitude, longitude];
        this._map = L.map("map").setView(coords, 13); //–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫–∞—Ä—Ç
        L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
            attribution:
                '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
        }).addTo(this._map); //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–∏ –ø–æ–º–æ—â–∏ API —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–º —Ä–µ—Å—É—Ä—Å–µ

        this._map.on("click", this._showForm.bind(this));

        this._workouts.forEach((work) => {
            this._renderWorkMarker(work);
        });
    }

    //–ú–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∑–∏—Ç —Ñ–æ—Ä–º—É –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ –∫–∞—Ä—Ç–µ.
    _showForm(mapE) {
        this._mapEvent = mapE;
        form.classList.remove("hidden");
        inputDistance.focus();
    }
    // –ú–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.
    // prettier-ignore
    _toogleField() {
    inputCadence.closest(".form__row").classList.toggle("form__row--hidden");
    inputElevation.closest(".form__row").classList.toggle("form__row--hidden");
  }

    //–ú–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–≤–∏—Ç –º–µ—Ç–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ
    _newWorkout(e) {
        e.preventDefault();

        //–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —á–∏—Å–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ö "–ë–µ–≥" –∏ "–í–µ–ª–æ—Å–∏–ø–µ–¥"

        const validInputs = (...inputs) =>
            inputs.every((inp) => Number.isFinite(inp));

        //–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏-–ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ö

        const allPositive = (...inputs) =>
            inputs.every((inp) => {
                inp > 0;
                alert("–í—ã –≤–≤–µ–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ");
            });

        //–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        const type = inputType.value; //—Ç–∏–ø —É –Ω–∞—Å –æ–∑–Ω–∞—á–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ–∂–¥—É –±–µ–≥–æ–º –∏ –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–º, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ value
        const distance = +inputDistance.value; // —ç—Ç–æ —É –Ω–∞—Å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
        const duration = +inputDuration.value; // + –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ Number(—ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ)
        const { lat, lng } = this._mapEvent.latlng;
        let workout;

        //–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º "–ë–µ–≥"
        if (type === "running") {
            const cadence = +inputCadence.value;

            if (
                !validInputs(distance, duration, cadence) //||
                // !allPositive(distance, duration, cadence)
            ) {
                return alert("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ");
            }
            workout = new Running([lat, lng], distance, duration, cadence);
        }

        //–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º "–í–µ–ª–æ—Å–∏–ø–µ–¥"
        if (type === "cycling") {
            const elevation = +inputElevation.value;

            if (
                !validInputs(distance, duration, elevation) //||
                // !allPositive(distance, duration, elevation)
            ) {
                return alert("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ");
            }
            workout = new Cyrcling([lat, lng], distance, duration, elevation);
        }
        this._workouts.push(workout);
        console.log(this._workouts);

        //–†–µ–Ω–¥–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
        this._renderWorkMarker(workout);

        //–†–µ–Ω–¥–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        this._renderWorkout(workout);

        //–û—Ç—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ —Å–ø—Ä—è—Ç–∞—Ç—å —Ñ–æ—Ä–º—É
        this._hideForm();

        //–ü–æ–¥–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        this._setLocalStorage();
    }

    //–û—Ç—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ —Å–ø—Ä—è—Ç–∞—Ç—å —Ñ–æ—Ä–º—É
    _hideForm() {
        inputDistance.value =
            inputDuration.value =
            inputCadence.value =
            inputElevation.value =
                "";
        form.classList.add("hidden");
    }

    //–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ LS
    _setLocalStorage() {
        localStorage.setItem("workout", JSON.stringify(this._workouts));
    }

    //–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ LS –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞
    _getLocalStorage() {
        const data = JSON.parse(localStorage.getItem("workout"));
        console.log(data);
        if (!data) return;

        this._workouts = data;
    }

    //–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ LS
    reset() {
        localStorage.removeItem("workout");
        location.reload();
    }

    //–ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ç–∞–≤–∏—Ç—å –Ω–∞–º –º–µ—Ç–∫—É –Ω–∞ –∫–∞—Ä—Ç—É
    _renderWorkMarker(workout) {
        L.marker(workout.coords) // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
            .addTo(this._map) // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç—É
            .bindPopup(
                // –±–∏–Ω–¥–∏–º popup
                L.popup({
                    // –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ popap
                    maxWidth: 250,
                    minWidth: 100,
                    autoClose: false,
                    closeOnClick: false,
                    className: "mark-popup",
                })
            )
            .setPopupContent(
                `${workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥"} ${
                    workout.description
                }`
            ) //—Ç–µ–∫—Å—Ç –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ popap
            .openPopup(); // –æ—Ç–∫—Ä—ã—Ç–∏–µ popap
    }

    //–†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    _renderWorkout(workout) {
        let html = `
        <li class="workout workout--${workout.type}" data-id="${workout.id}">
          <h2 class="workout__title">${workout.description}</h2>
          <div class="workout__details">
            <span class="workout__icon">${
                workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥‚Äç‚ôÄÔ∏è"
            }</span>
            <span class="workout__value">${workout.distance}</span>
            <span class="workout__unit">–∫–º</span>
          </div>
          <div class="workout__details">
          <span class="workout__icon">‚è±</span>
          <span class="workout__value">${workout.duration}</span>
          <span class="workout__unit">–º–∏–Ω</span>
        </div>
        `;
        if (workout.type === "running") {
            html += `
            div class="workout__details">
            <span class="workout__icon">‚ö°Ô∏è</span>
            <span class="workout__value">${workout.pace.toFixed(1)}</span>
            <span class="workout__unit">–º–∏–Ω/–∫–º</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">ü¶∂üèº</span>
            <span class="workout__value">${workout.cadence}</span>
            <span class="workout__unit">—à–∞–≥</span>
          </div>
          </li>
            `;

            if (workout.type === "cycling") {
                html += `
                <span class="workout__icon">‚ö°Ô∏è</span>
                <span class="workout__value">${workout.speed.toFixed(1)}</span>
                <span class="workout__unit">–∫–º/—á–∞—Å</span>
              </div>
              <div class="workout__details">
                <span class="workout__icon">‚õ∞</span>
                <span class="workout__value">${workout.elevation}</span>
                <span class="workout__unit">–º</span>
              </div>
            </li>
                `;
            }
        }
        form.insertAdjacentHTML("afterend", html);
    }
    _moveToPopap(e) {
        const workoutEL = e.target.closest(".workout");
        console.log(workoutEL);
        if (!workoutEL) return;

        const workout = this._workouts.find(
            (work) => work.id === workoutEL.dataset.id
        );
        console.log(workout);
        this._map.setView(workout.coords, 13, {
            animate: true,
            pan: { duration: 1 },
        });
    }
}

//–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new App();
